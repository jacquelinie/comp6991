# RSheets Mark Request

# Marked Questions

These questions are listed in the spec, and you must fill them out
to receive marks for the Design Questions.

## Question 1:
1. It is worse because parsing the user input string without the struct of Command would reduce readability and make error handling less manageable. A struct can neatly encapsulate the command structure. It also allows validation at the struct level, enabling type-safe access to fields.
2. It is worse because FromStr is a Rust idiom for converting strings into structured data types. FromStr aligns with standard Rust practice and allows the use of str::parse for parsing. A parse function would achieve similar functionality but lose the easy syntax for use and expressiveness that FromStr provides.
3. Worse because using named fields within an enum keeps all command-related logic in one file. Having GetCommand and SetCommand structs would require a more complicated control flow to handle each command type separately, making the code less concise.


## Question 2:
Scalar: src/lib.rs:326
Vector: src/lib.rs:321
Matrix: src/lib.rs:317

All three types share similar logic in parse_expr_args and get_value functions to retrieve and parse the cell references.
There is distinct logic for each type, where in get_vector and get_matrix functions, there is different indexing to traverse the vector/matrix. There is also different return types.

Improvement: To make handling more consolidated, a general function that accepts coordinates and returns either a Scalar, Vector, or Matrix based on parameters, could be used to reduce duplicate code. Maybe a while loop that can be used to traverse both the rows/columns can be used.

Changes:
- Add a MatrixList to CellArgument.
- Define a new function get_matrix_list that iterates over a list of matrix ranges and uses get_matrix to get matrices, storing each as a nested Vec<Vec<CellValue>>.
- Update parse_expr_args to recognize and handle MatrixList expressions.


## Question 3:
‘src/lib.rs:22::28’ requires using Mutex with HashMap for shared state management. Mutex allows for concurrent access, and eliminates the risk of race conditions. Rust’s type system prevents this by enforcing Send and Sync trait bounds, ensuring only thread-safe types are shared across threads.
‘src/lib.rs:68’ uses thread::spawn to create threads for concurrent task execution. However, this raises a possible concurrency bug which attempts to share an Rc (reference-counted pointer). Rust’s type system prohibits Rc in thread::spawn by requiring the Send trait, which led me to use Arc (atomic reference-counted pointer) instead. This prevents unexpected runtime errors, ensuring safe memory sharing across threads.



## Question 4:



## Question 5:
Set A1 5 sets A1 as 5 after being evaluated (‘src/lib.rs:181’) and stores the expression. Set B1 A1 evaluates A1 and sets B1 as 5 and stores its expression (‘src/lib.rs:259’). It then adds A1 to the HashSet of B1 in the Dependers HashMap (‘src/lib.rs:508’). In Dependencies HashMap, B1 is added to A1’s HashSet (‘src/lib.rs:522’).
Similarly for Set C1 B1, the same steps are taken. Set A1 7 sets A1 as 7, then when processing the dependencies, it sees that B1 is dependent on A1. The new B1 is evaluated, then updates B1’s dependencies. When updating, I check for what depends on B1 (‘src/lib.rs:460’). We then reevaluate C1 (‘src/lib.rs:467’), and check if anything is dependent on C1.



# Questions to the Marker (OPTIONAL)

Remember: you don't have to fill these out; but if
you want to get feedback on a particular element of
your code; you can!

1.

2.

3.
